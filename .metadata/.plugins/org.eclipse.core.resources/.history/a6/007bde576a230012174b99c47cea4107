package com.narate.ar.fork_framework;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.jwetherell.augmented_reality.data.ARData;
import com.narate.ar.facebook.LoginWithFacebook;
import com.narate.ar.facebook.ShareToFacebook;
import com.narate.ar.fork_framework.photo_upload.Base64;
import com.narate.ar.fork_framework.place.Place;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;

public class AddForm extends Activity implements LocationListener {
	/** Called when the activity is first created. */
	private Spinner category;
	private EditText name, description;
	private Button add;
	private ImageButton take_photo;
	private InputStream inputStream;
	private float lat = 0, lng = 0;
	private Bitmap bitmap = null;
	private TextView search_text;

	private final int IMAGE_CAPTURE = 0, IMAGE_PICKER = 1;

	private LocationManager location = null;
	private boolean isFoundLocation = false, isTakePhoto = false;
	// private final String KEY_SERVER = "http://192.168.1.2/test_edit/";
	private final String KEY_SERVER = "http://cpre-pjb.kmutnb.ac.th/project/navigator/";
	private SharedPreferences sharedPreferences = null;
	// private SharedPreferences myPref = getSharedPreferences("facebook_login",
	// MODE_PRIVATE );
	// private SharedPreferences.Editor myPrefEditor = myPref.edit();

	private ProgressDialog pg_dialog;
	private File file = null;
	private String image_str = "", filePath = "";
	private int category_id = 0;
	private String _name, _latitude, _longitude, _description, user_id,
			user_name, user_username;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add);
		location = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		location.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,
				this);
		if (!location.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			GPSAlert();
		}
		Location last = ARData.getCurrentLocation();
		lat = (float) last.getLatitude();
		lng = (float) last.getLongitude();

		// String strSavedMem1 = sharedPreferences.getString("user_name", "");
		// Toast.makeText(AddForm.this, strSavedMem1, Toast.LENGTH_LONG).show();
		category = (Spinner) findViewById(R.id.category);
		name = (EditText) findViewById(R.id.place_name);
		description = (EditText) findViewById(R.id.description);
		take_photo = (ImageButton) findViewById(R.id.take_photo);
		add = (Button) findViewById(R.id.add_new_place);
		search_text = (TextView) findViewById(R.id.search_text);
		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
				this, R.array.category, android.R.layout.simple_spinner_item);
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		category.setAdapter(adapter);
		registerForContextMenu(take_photo);

		take_photo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				takePhoto();

			}

		});

		add.setEnabled(false);

		add.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				sharedPreferences = getSharedPreferences("facebook_login",
						MODE_PRIVATE);
				String user = sharedPreferences.getString("name", "");
				if (user.equalsIgnoreCase("")) {
					AlertDialog.Builder dialog = new AlertDialog.Builder(
							AddForm.this);
					dialog.setMessage(
							"Login with facebook first")
							.setCancelable(false)
							.setPositiveButton("OK, log me in",
									new DialogInterface.OnClickListener() {

										@Override
										public void onClick(
												DialogInterface arg0, int arg1) {
											// TODO Auto-generated method stub
											startActivityForResult(new Intent(
													AddForm.this,
													LoginWithFacebook.class), 0);
										}
									});

					AlertDialog alert = dialog.create();
					alert.setTitle("Login first");
					alert.show();

				} else {
					if (name.getText().toString().length() != 0
							&& description.getText().toString().length() != 0) {
						if (!location
								.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
							GPSAlert();
						} else {
							if (isTakePhoto) {
								UploadData task = new UploadData();
								task.execute(new String[] { KEY_SERVER
										+ "mobile/mobile_insert_location.php" });

							} else {
								AlertDialog.Builder dialog = new AlertDialog.Builder(
										AddForm.this);
								dialog.setMessage(
										"Add photo")
										.setCancelable(false)
										.setPositiveButton(
												"Take Photo",
												new DialogInterface.OnClickListener() {

													@Override
													public void onClick(
															DialogInterface arg0,
															int arg1) {
														// TODO Auto-generated
														takePhoto();
													}
												})
										.setNegativeButton(
												"Pick Photo",
												new DialogInterface.OnClickListener() {

													@Override
													public void onClick(
															DialogInterface arg0,
															int arg1) {
														// TODO Auto-generated
														// method
														Intent intent = new Intent();
														intent.setType("image/*");
														intent.setAction(Intent.ACTION_GET_CONTENT);
														startActivityForResult(
																intent,
																IMAGE_PICKER);
													}
												});

								AlertDialog alert = dialog.create();
								alert.setTitle("Take or pick photo");
								alert.show();
							}
						}

					} else {
						AlertDialog.Builder dialog = new AlertDialog.Builder(
								AddForm.this);
						dialog.setMessage(
								"Hello world")
								.setCancelable(false)
								.setPositiveButton("OK",
										new DialogInterface.OnClickListener() {

											@Override
											public void onClick(
													DialogInterface arg0,
													int arg1) {
												// TODO Auto-generated method
											}
										});

						AlertDialog alert = dialog.create();
						alert.setTitle("SOME TITLE");
						alert.show();
					}
				}

			}

		});

	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		menu.setHeaderTitle("Take or Pick Photo");
		menu.add(0, v.getId(), 0, "Take Photo");
		menu.add(0, v.getId(), 0, "Pick Photo");
	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {
		if (item.getTitle() == "Take Photo") {
			takePhoto();
		} else if (item.getTitle() == "Pick Photo") {
			Intent intent = new Intent();
			intent.setType("image/*");
			intent.setAction(Intent.ACTION_GET_CONTENT);
			startActivityForResult(intent, IMAGE_PICKER);
		} else {
			return false;
		}
		return true;
	}

	public void takePhoto() {

		Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
		File photo = new File(Environment.getExternalStorageDirectory(),
				"temp_place_photo_upload.jpg");
		intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photo));
		startActivityForResult(intent, IMAGE_CAPTURE);
	}

	public String convertResponseToString(HttpResponse response)
			throws IllegalStateException, IOException {

		String res = "";
		StringBuffer buffer = new StringBuffer();
		inputStream = response.getEntity().getContent();
		int contentLength = (int) response.getEntity().getContentLength();

		if (contentLength < 0) {
		} else {
			byte[] data = new byte[512];
			int len = 0;
			try {
				while (-1 != (len = inputStream.read(data))) {
					buffer.append(new String(data, 0, len));
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			try {
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			res = buffer.toString();

		}
		return res;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		lat = (float) location.getLatitude();
		lng = (float) location.getLongitude();
		search_text.setText("Found Location!");

		if (!isFoundLocation && isTakePhoto) {
			isFoundLocation = true;
			add.setEnabled(true);
		}

		// Toast.makeText(AddForm.this, "Found Location",
		// Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	public int getCategoryId(String category_name) {
		if (category_name.equals("Category 0­")) {
			return 0;
		} else if (category_name.equals("Category 1­")) {
			return 1;
		} else if (category_name.equals("Category 2")) {
			return 2;
		} else if (category_name.equals("Category 3")) {
			return 3;
		} else if (category_name.equals("Category 4")) {
			return 4;
		} else if (category_name.equals("Category 5")) {
			return 5;
		} else if (category_name.equals("Category 6")) {
			return 6;
		} else if (category_name.equals("Category 7")) {
			return 7;
		} else if (category_name.equals("Category 8")) {
			return 8;
		} else {
			return 0;
		}
	}

	private void GPSAlert() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setMessage("GPS not enabled please enable your GPS service")
				.setCancelable(false)
				.setPositiveButton("OK, take it",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								Intent gpsOptionsIntent = new Intent(
										android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
								startActivity(gpsOptionsIntent);
							}
						});
		AlertDialog alert = builder.create();
		alert.setIcon(android.R.drawable.ic_dialog_alert);
		alert.setTitle("Enable GPS Service");
		alert.show();
	}

	public void showDialog(String title, String message) {
		AlertDialog.Builder dialog = new AlertDialog.Builder(this);
		dialog.setIcon(android.R.drawable.ic_dialog_alert);
		dialog.setMessage(message)
				.setCancelable(false)
				.setPositiveButton("Done",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								// TODO Auto-generated method stub
								finish();
							}
						});

		AlertDialog alert = dialog.create();
		alert.setTitle(title);
		alert.show();
	}

	public void shareDialog(String title, String message,
			final String location_id) {
		AlertDialog.Builder dialog = new AlertDialog.Builder(this);
		dialog.setIcon(android.R.drawable.ic_menu_share);
		dialog.setMessage(message)
				.setCancelable(false)
				.setPositiveButton("Share",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								// TODO Auto-generated method stub
								Intent intent = new Intent(AddForm.this,
										ShareToFacebook.class);
								intent.putExtra("TAG", "AddForm");
								intent.putExtra("name", _name);
								intent.putExtra("description", _description);
								intent.putExtra("url", KEY_SERVER
										+ "preview_location.php?location="
										+ location_id);
								startActivityForResult(intent, 0);
							}
						})
				.setNegativeButton("No, Thanks",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								// TODO Auto-generated method stub
								finish();
							}
						});

		AlertDialog alert = dialog.create();
		alert.setTitle(title);
		alert.show();
	}

	public void showConfirmDialog() {
		AlertDialog.Builder dialog = new AlertDialog.Builder(this);
		dialog.setIcon(android.R.drawable.ic_dialog_alert);
		dialog.setMessage("Use this photo for this place.")
				.setCancelable(false)
				.setPositiveButton("OK",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								// TODO Auto-generated method stub
								bitmap = BitmapFactory
										.decodeFile("/sdcard/temp_place_photo_upload.jpg");
								filePath = "/sdcard/temp_place_photo_upload.jpg";
								file = new File(filePath);
							}
						});

		AlertDialog alert = dialog.create();
		alert.setTitle("Use photo confirm");
		alert.show();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultcode,
			Intent intent) {
		super.onActivityResult(requestCode, resultcode, intent);
		switch (requestCode) {
		case IMAGE_CAPTURE:
			if (resultcode == RESULT_OK) {
				showConfirmDialog();
				isTakePhoto = true;
				add.setText("  Add it!  ");
				if (isTakePhoto && isFoundLocation) {
					add.setEnabled(true);
				}
			} else {
				Log.d("Status:", "Cancel capture");
			}
			break;
		case IMAGE_PICKER:
			if (intent != null && resultcode == RESULT_OK) {
				add.setText("PICK IMAGE");
				isTakePhoto = true;
				if (isTakePhoto && isFoundLocation) {
					add.setEnabled(true);
				}
				Uri selectedImage = intent.getData();

				String[] filePathColumn = { MediaStore.Images.Media.DATA };
				Cursor cursor = getContentResolver().query(selectedImage,
						filePathColumn, null, null, null);
				cursor.moveToFirst();
				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				filePath = cursor.getString(columnIndex);
				cursor.close();

				if (bitmap != null && !bitmap.isRecycled()) {
					bitmap = null;
				}

				bitmap = BitmapFactory.decodeFile(filePath);
				file = new File(filePath);
			} else {
				Log.d("Status:", "Photopicker canceled");
			}
			break;
		default:
			break;
		}
	}

	private class UploadData extends AsyncTask<String, Void, String> {
		@Override
		protected void onPreExecute() {
			// scale image to width or height is 800px
			int w = bitmap.getWidth();
			int h = bitmap.getHeight();
			float scale = (float) (w * 1.0 / h * 1.0);

			if (w > h) {
				bitmap = Bitmap.createScaledBitmap(bitmap, 800,
						(int) Math.ceil((800.0 / scale)), true);
			} else {
				bitmap = Bitmap.createScaledBitmap(bitmap,
						(int) Math.ceil((800.0 * scale)), 800, true);
			}

			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
			byte[] byte_arr = stream.toByteArray();
			image_str = Base64.encodeBytes(byte_arr);

			pg_dialog = new ProgressDialog(AddForm.this);			
			pg_dialog.setTitle("Uploading");
			pg_dialog.setMessage("Uploading please wait...");	
			pg_dialog.setCancelable(false);
			pg_dialog.show();
		}

		@Override
		protected String doInBackground(String... urls) {
			String the_string_response = "";

			category_id = getCategoryId(category.getSelectedItem().toString());
			_name = name.getText().toString();
			_latitude = lat + "";
			_longitude = lng + "";
			_description = description.getText().toString();
			SharedPreferences sharedPreferences = getSharedPreferences(
					"facebook_login", MODE_PRIVATE);
			user_id = sharedPreferences.getString("id", "");
			user_name = sharedPreferences.getString("name", "");
			user_username = sharedPreferences.getString("user_name", "");

			ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();

			nameValuePairs.add(new BasicNameValuePair("location_cate_id",
					category_id + ""));
			nameValuePairs
					.add(new BasicNameValuePair("photo_upload", image_str));
			nameValuePairs.add(new BasicNameValuePair("name", _name));
			nameValuePairs.add(new BasicNameValuePair("latitude", _latitude));
			nameValuePairs.add(new BasicNameValuePair("longitude", _longitude));
			nameValuePairs.add(new BasicNameValuePair("description",
					_description));
			nameValuePairs.add(new BasicNameValuePair("user_id", user_id));
			nameValuePairs.add(new BasicNameValuePair("user_name", user_name));
			nameValuePairs.add(new BasicNameValuePair("user_username",
					user_username));

			String host = urls[0];

			DefaultHttpClient httpclient = new DefaultHttpClient();

			try {
				HttpPost httppost = new HttpPost(host);

				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs,
						"utf-8"));
				// HttpClient httpclient = new DefaultHttpClient();

				HttpResponse response = httpclient.execute(httppost);
				the_string_response = convertResponseToString(response);

			} catch (Exception e) {

				// Toast.makeText(AddForm.this, "ERROR " + e.getMessage(),
				// Toast.LENGTH_LONG).show();
				// showDialog("Error", "HTTP connection error" + e.toString());
				Log.e("AddForm", "Error in http connection " + e.toString());
				return e.toString();
			}
			return the_string_response;
		}


		@Override
		protected void onPostExecute(String result) {
			pg_dialog.dismiss();
			// result = result.replace(" ", "");
			result = result.replace("\n", "");
			String id_str = result.substring(result.indexOf("#") + 1,
					result.indexOf("E"));

			if (!isNumber(id_str)) {
				showDialog("id_str",
						result + " : " + result.length());
			} else {
				shareDialog(
						"Dialog title",
						"Dialog message ",
						id_str);
			}
		}

	}

	private boolean isNumber(String str) {
		try {
			Integer.parseInt(str);
			return true;
		} catch (NumberFormatException ex) {
			return false;
		}
	}

}
